1705570289
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3Aaa35374c4e3dca158eae6d98fab2afd0-79a6667a470261b16f36239b618f0acf
s:9492:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NjA6IlBIUCBza3JpcHQgcHJvIHpwcmFjb3bDoW7DrSBuYWhyw6F2w6Fuw60gb2Jyw6F6a8WvIHByb2R1a3R1LiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoxNTU6IlNrcmlwdCBvdsSbxZl1amUsIHpkYSBwb8W+YWRhdmVrIHBvdcW+w612w6EgbWV0b2R1IFBPU1QgYSB6ZGEgamUgdcW+aXZhdGVsIGFkbWluaXN0csOhdG9yZW0uCk7DoXNsZWRuxJsgcHJvdsOhZMOtIHZhbGlkYWNpIG5haHLDoXZhbsOpaG8gb2Jyw6F6a3UgcHJvZHVrdHUuIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6Mjp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czo3OiJwYWNrYWdlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoxMDoiQXBpU2NyaXB0cyI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fWk6MTtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xBdXRob3IiOjQ6e3M6NzoiACoAbmFtZSI7czo2OiJhdXRob3IiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xBdXRob3IAYXV0aG9yTmFtZSI7czoxODoiW0RhbWlyIEFiZHVsbGF5ZXZdIjtzOjU4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcQXV0aG9yAGF1dGhvckVtYWlsIjtzOjA6IiI7fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiNzlhNjY2N2E0NzAyNjFiMTZmMzYyMzliNjE4ZjBhY2YiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZSI7czoxMDoidXBsb2FkLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjM0OiJuYWlsaW1hZ2UvcGhwX2xvZ2ljL2FwaS91cGxvYWQucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo0NTgxOiI8P3BocAoKLyoqCiAqIFBIUCBza3JpcHQgcHJvIHpwcmFjb3bDoW7DrSBuYWhyw6F2w6Fuw60gb2Jyw6F6a8WvIHByb2R1a3R1LgogKgogKiBTa3JpcHQgb3bEm8WZdWplLCB6ZGEgcG/FvmFkYXZlayBwb3XFvsOtdsOhIG1ldG9kdSBQT1NUIGEgemRhIGplIHXFvml2YXRlbCBhZG1pbmlzdHLDoXRvcmVtLgogKiBOw6FzbGVkbsSbIHByb3bDoWTDrSB2YWxpZGFjaSBuYWhyw6F2YW7DqWhvIG9icsOhemt1IHByb2R1a3R1LgogKgogKiBAcGFja2FnZSBBcGlTY3JpcHRzCiAqIEBhdXRob3IgW0RhbWlyIEFiZHVsbGF5ZXZdCiAqLwpzZXNzaW9uX3N0YXJ0KCk7CnRyeSB7CgogICAgLy8gTmFzdGF2ZW7DrSBIVFRQIGhsYXZpxI1reSBwcm8gSlNPTiBvZHBvdsSbxI8KICAgIGhlYWRlcignQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyk7CgogICAgLy8gSW5pY2lhbGl6YWNlIGRhdG92w6lobyBwb2xlCiAgICAkZGF0YSA9IGFycmF5KCk7CgogICAgLy8gT3bEm8WZZW7DrSBwbGF0bm9zdGkgbWV0b2R5IHBvxb5hZGF2a3UKICAgIGlmICgkX1NFUlZFUlsnUkVRVUVTVF9NRVRIT0QnXSAhPT0gJ1BPU1QnKSB7CiAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICdzdGF0dXMnID0+ICdlcnJvcicsCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiAnSW52YWxpZCByZXF1ZXN0IG1ldGhvZCcsCiAgICAgICAgXTsKICAgICAgICBlY2hvIGpzb25fZW5jb2RlKCRkYXRhKTsKICAgICAgICBleGl0OwogICAgfTsKCiAgICAvLyBPdsSbxZllbsOtLCB6ZGEgamUgbmFocsOhdsOhbiBzb3Vib3IgJ3Byb2R1Y3RJbWcnIGEgemRhIGplIHXFvml2YXRlbCBhZG1pbmlzdHLDoXRvcmVtCiAgICBpZiAoaXNzZXQoJF9GSUxFU1sncHJvZHVjdEltZyddKSAmJiAkX1NFU1NJT05bJ2lzQWRtaW4nXSA9PSAxKSB7CgogICAgICAgIC8vIFrDrXNrw6Fuw60gcm96bcSbcsWvIG5haHLDoXZhbsOpaG8gb2Jyw6F6a3UKICAgICAgICBsaXN0KCR3aWR0aCwgJGhlaWdodCkgPSBnZXRpbWFnZXNpemUoJF9GSUxFU1sncHJvZHVjdEltZyddWyd0bXBfbmFtZSddKTsKCiAgICAgICAgLy8gS29udHJvbGEsIHpkYSBqZSBvYnLDoXplayDEjXR2ZXJjb3bDvQogICAgICAgIGlmICgkd2lkdGggIT09ICRoZWlnaHQpIHsKICAgICAgICAgICAgJGRhdGEgPSBbCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICdUaGUgaW1hZ2Ugc2hvdWxkIGJlIHNxdWFyZScsCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIGVjaG8ganNvbl9lbmNvZGUoJGRhdGEpOwogICAgICAgICAgICBleGl0OwogICAgICAgIH0KCiAgICAgICAgLy8gS29udHJvbGEgcG92b2xlbsO9Y2ggdHlwxa8gc291Ym9yxa8KICAgICAgICBpZiAoIWluX2FycmF5KCRfRklMRVNbJ3Byb2R1Y3RJbWcnXVsndHlwZSddLCBbJ2ltYWdlL3BuZycsICdpbWFnZS93ZWJwJywgJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvanBnJywgJ2ltYWdlL2hlaWYnLF0pKSB7CiAgICAgICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAnSW52YWxpZCBmaWxlIHR5cGUuJywKICAgICAgICAgICAgXTsKICAgICAgICAgICAgZWNobyBqc29uX2VuY29kZSgkZGF0YSk7CiAgICAgICAgICAgIGV4aXQ7CiAgICAgICAgfQoKICAgICAgICAvLyBOYXN0YXZlbsOtIGNlc3R5IHBybyB1bG/FvmVuw60gbmFocsOhdmFuw6lobyBvYnLDoXprdQogICAgICAgICRwcm9kdWN0SW1nRmlsZSA9ICIvaG9tZS9hYmR1bGRhbS93d3cvbmFpbGltYWdlL2ltYWdlL3Byb2R1Y3RzLyIgLiB0aW1lKCkgLiAnXycgLiAkX0ZJTEVTWydwcm9kdWN0SW1nJ11bJ25hbWUnXTsKCiAgICAgICAgLy8gUMWZZXN1bnV0w60gbmFocsOhdmFuw6lobyBzb3Vib3J1IG5hIHNlcnZlcgogICAgICAgIGlmIChtb3ZlX3VwbG9hZGVkX2ZpbGUoJF9GSUxFU1sncHJvZHVjdEltZyddWyd0bXBfbmFtZSddLCAkcHJvZHVjdEltZ0ZpbGUpKSB7CgogICAgICAgICAgICAvLyBWeXR2b8WZZW7DrSBvYnLDoXprdSB6IG5hxI10ZW7DvWNoIGRhdAogICAgICAgICAgICAkaW1hZ2UgPSBpbWFnZWNyZWF0ZWZyb21zdHJpbmcoZmlsZV9nZXRfY29udGVudHMoJHByb2R1Y3RJbWdGaWxlKSk7CgogICAgICAgICAgICAvLyBOb3bDqSByb3ptxJtyeSBvYnLDoXprdQogICAgICAgICAgICAkbmV3V2lkdGggPSAyODA7CiAgICAgICAgICAgICRuZXdIZWlnaHQgPSAyODA7CgogICAgICAgICAgICAvLyBWeXR2b8WZZW7DrSB6bWVuxaFlbsOpIHZlcnplIG9icsOhemt1CiAgICAgICAgICAgICRyZXNpemVkSW1hZ2UgPSBpbWFnZWNyZWF0ZXRydWVjb2xvcigkbmV3V2lkdGgsICRuZXdIZWlnaHQpOwoKICAgICAgICAgICAgLy8gWmtvcMOtcm92w6Fuw60gYSB6bWVuxaFlbsOtIG9icsOhemt1CiAgICAgICAgICAgIGltYWdlY29weXJlc2FtcGxlZCgkcmVzaXplZEltYWdlLCAkaW1hZ2UsIDAsIDAsIDAsIDAsICRuZXdXaWR0aCwgJG5ld0hlaWdodCwgJHdpZHRoLCAkaGVpZ2h0KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIE5vdsOhIGNlc3RhIHBybyB6bWVuxaFlbsO9IG9icsOhemVrIHMgbm92w71tIG7DoXp2ZW0KICAgICAgICAgICAgJG5ld19wcm9kdWN0SW1nRmlsZSA9ICduYWlsaW1hZ2UvaW1hZ2UvcHJvZHVjdHMvJyAuIGRhdGUoJ2QubS5ZX0guaS5zJykgLiAnXycgLiBwYXRoaW5mbygkX0ZJTEVTWydwcm9kdWN0SW1nJ11bJ25hbWUnXSwgUEFUSElORk9fRklMRU5BTUUpIC4gJy53ZWJwJzsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFVsb8W+ZW7DrSB6bWVuxaFlbsOpaG8gb2Jyw6F6a3UgdmUgZm9ybcOhdHUgd2VicAogICAgICAgICAgICBpZiAoaW1hZ2V3ZWJwKCRyZXNpemVkSW1hZ2UsICcvaG9tZS9hYmR1bGRhbS93d3cvJyAuICRuZXdfcHJvZHVjdEltZ0ZpbGUsIDgwKSkgewogICAgICAgICAgICAgICAgLy8gT2RzdHJhbsSbbsOtIHDFr3ZvZG7DrWhvIG9icsOhemt1CiAgICAgICAgICAgICAgICB1bmxpbmsoJHByb2R1Y3RJbWdGaWxlKTsKICAgICAgICAgICAgICAgIC8vIFZ5bWF6w6Fuw60gcGFtxJt0aQogICAgICAgICAgICAgICAgaW1hZ2VkZXN0cm95KCRpbWFnZSk7CiAgICAgICAgICAgICAgICBpbWFnZWRlc3Ryb3koJHJlc2l6ZWRJbWFnZSk7CiAgICAgICAgICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgICAgICAgJ2ZpbGVfdXJsJyA9PiAkbmV3X3Byb2R1Y3RJbWdGaWxlLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAnSXMgdXBsb2FkZWQnLAogICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgIC8vIFDFmWlkxJtsaXQgb3puw6FtZW7DrSBvIMO6c3DEm2NodQogICAgICAgICAgICAgICAgZWNobyBqc29uX2VuY29kZSgkZGF0YSk7CiAgICAgICAgICAgICAgICBleGl0OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gT2RzdHJhbsSbbsOtIHDFr3ZvZG7DrWhvIG9icsOhemt1CiAgICAgICAgICAgICAgICB1bmxpbmsoJHByb2R1Y3RJbWdGaWxlKTsKICAgICAgICAgICAgICAgIC8vIFZ5bWF6w6Fuw60gcGFtxJt0aQogICAgICAgICAgICAgICAgaW1hZ2VkZXN0cm95KCRpbWFnZSk7CiAgICAgICAgICAgICAgICBpbWFnZWRlc3Ryb3koJHJlc2l6ZWRJbWFnZSk7CiAgICAgICAgICAgICAgICAkZGF0YSA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICdzdGF0dXMnID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICdDb252ZXJ0YXRpb24gRXJyb3InLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIC8vIFDFmWlkxJtsaXQgb3puw6FtZW7DrSBvIGNoeWLEmwogICAgICAgICAgICAgICAgZWNobyBqc29uX2VuY29kZSgkZGF0YSk7CiAgICAgICAgICAgICAgICBleGl0OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gUMWZaWTEm2xpdCBvem7DoW1lbsOtIG8gY2h5YsSbCiAgICAgICAgICAgICRkYXRhID0gYXJyYXkoCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICdJcyBub3QgdXBsb2FkZWQnLAogICAgICAgICAgICApOwogICAgICAgICAgICBlY2hvIGpzb25fZW5jb2RlKCRkYXRhKTsKICAgICAgICAgICAgZXhpdDsKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIC8vIFDFmWlkxJtsaXQgb3puw6FtZW7DrSBvIGNoeWLEmwogICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAnc3RhdHVzJyA9PiAnZXJyb3InLAogICAgICAgICAgICAnbWVzc2FnZScgPT4gJ0ZpbGUgaXMgbm90JywKICAgICAgICBdOwogICAgICAgIGVjaG8ganNvbl9lbmNvZGUoJGRhdGEpOwogICAgICAgIGV4aXQ7CiAgICB9Cn0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgewogICAgLy8gUMWZaWTEm2xpdCBvem7DoW1lbsOtIG8gY2h5YsSbCiAgICBlY2hvIGpzb25fZW5jb2RlKGFycmF5KCdlcnJvcicgPT4gJGUtPmdldE1lc3NhZ2UoKSkpOwogICAgZXhpdDsKfQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";